const { ethers } = require("hardhat");

async function main() {
  // Obtener par√°metros con valores por defecto m√°s robustos
  const factoryAddr = process.env.FACTORY_ADDRESS;
  const tokenAddr = process.env.TOKEN_ADDRESS;
  const minRaw = process.env.MIN_AMOUNT;

  // Si faltan variables de entorno, mostrar ayuda espec√≠fica
  if (!factoryAddr || !tokenAddr || !minRaw) {
    console.error("‚ùå Error: Faltan variables de entorno requeridas");

    if (!factoryAddr) console.error("   - FACTORY_ADDRESS no est√° definida");
    if (!tokenAddr) console.error("   - TOKEN_ADDRESS no est√° definida");
    if (!minRaw) console.error("   - MIN_AMOUNT no est√° definida");

    console.error("\nüí° Aseg√∫rate de que tu archivo .env contiene:");
    console.error("   FACTORY_ADDRESS=0xtu_direccion_factory");
    console.error("   TOKEN_ADDRESS=0xtu_direccion_token");
    console.error("   MIN_AMOUNT=1000000");
    console.error("\nüìÅ El archivo .env debe estar en la ra√≠z del proyecto");
    process.exit(1);
  }

  // Configurar valores con variables de entorno
  const dur = process.env.DURATION ? Number(process.env.DURATION) : 259200;
  const quorum = process.env.QUORUM ? Number(process.env.QUORUM) : 4000;
  const approve = process.env.APPROVAL_THRESHOLD
    ? Number(process.env.APPROVAL_THRESHOLD)
    : 6000;
  const cap = process.env.CAPACITY ? Number(process.env.CAPACITY) : 2000;

  console.log("‚úÖ Creando c√≠rculo con par√°metros:");
  console.log("   Factory:", factoryAddr);
  console.log("   Token:", tokenAddr);
  console.log("   Monto m√≠nimo:", minRaw);
  console.log("   Duraci√≥n:", dur, "segundos");
  console.log("   Qu√≥rum:", quorum / 100 + "%");
  console.log("   Aprobaci√≥n:", approve / 100 + "%");
  console.log("   Capacidad:", cap / 100 + "%");

  const [deployer] = await ethers.getSigners();
  console.log("   Cuenta:", deployer.address);

  // Crear el c√≠rculo
  const factory = await ethers.getContractAt("ResQFactory", factoryAddr);
  console.log("üîÑ Enviando transacci√≥n...");

  const tx = await factory.createCircle(
    tokenAddr,
    BigInt(minRaw),
    dur,
    quorum,
    approve,
    cap
  );

  console.log("üì® Transacci√≥n enviada:", tx.hash);
  const rc = await tx.wait();

  const ev = rc.logs.find(
    (l) => l.fragment && l.fragment.name === "CircleCreated"
  );
  const circle = ev ? ev.args.circle : undefined;

  if (circle) {
    console.log("‚úÖ Circle creado en:", circle);
  } else {
    console.log(
      "‚ö†Ô∏è  Transacci√≥n confirmada pero no se encontr√≥ el evento CircleCreated"
    );
    console.log("Hash:", tx.hash);
  }
}

main().catch((e) => {
  console.error("‚ùå Error:", e);
  process.exit(1);
});
